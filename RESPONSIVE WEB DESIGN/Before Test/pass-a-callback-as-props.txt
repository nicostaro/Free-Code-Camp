class MyApp extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      inputValue: ''
    }
    this.handleChange = this.handleChange.bind(this);
  }
  handleChange(event) {
    this.setState({
      inputValue: event.target.value
    });
  }
  render() {
    return (
      <div>
      <GetInput input={this.state.inputValue}
                handleChange={this.handleChange}/>
      <RenderInput input={this.state.inputValue}/>
     {/*El orden ser√≠a:
     1) LLamo a GetInput, que si veo a GetInput tiene value =this.props.input, o sea, llama al input que se ve aca arriba, que a su vez, llama al input.Vale.
     2) LLamo a GetInput, que si veo a GetInput tiene onChange =this.props.handleCahnge, o sea, llama al handleChange que se ve aca arriba, que a su vez, llama a this.handleCHange.
     3) Mismo que 1 y 2 pero con RenderInput */}   
       </div>
    );
  }
};

class GetInput extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <h3>Get Input:</h3>
        <input
          value={this.props.input}
          onChange={this.props.handleChange}/>
      </div>
    );
  }
};

class RenderInput extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <h3>Input Render:</h3>
        <p>{this.props.input}</p>
      </div>
    );
  }
};